#!/bin/bash
#
# Filename: maxwin
# Author: Henrique Mel√≠cias
#
# Forces an app window to maximize when initializing.

# Bash strict mode: see http://redsymbol.net/articles/unofficial-bash-strict-mode/ for info.
set -o errexit -euo pipefail -o noclobber -o nounset
IFS=$'\n\t'

### Constants
BIN_NAME=maxwin
ARE_EXTRA_ARGS_DISCARDED_AFTER_DOUBLEDASH=0 # 1=discard; 0=save opts after -- to ${arr_extra_args}
ARE_EXTRA_ARGS_IGNORED=1 # 1=arr_extra_args will not be parsed as this script's OPTS, even if equal to any of the SHORT_OPTS or LONG_OPTS
CMD_ERR_FORMAT="Error: %s.\nSee \`$BIN_NAME --help\` for help and examples.\n"

# ================================================================================================

function f_print_help_text() {
     printf "\
$BIN_NAME forces an app window to maximize when initializing.

This script detects the current screen dimensions (sum of all currently displayed monitors; this can be changed optional arguments) and uses it as the window boundaries.
If you are using a Steam Deck, make sure to select the NATIVE resolution option when starting the app from Gamescope.

Pre-requisites:
    The binary \`wmctrl\` is required. You can specify its location with \`--wmctrl_path\` or the program will check on \`\$PATH\`.

Usage:
    $BIN_NAME [options] [command] -- COMMAND [args...] [options]

Examples:
    # Maximize the named window of a newly opened flatpak app.
    # You can get the window name by executing \`xwininfo\` on the terminal and clicking on the apropriate window. There are others methods as well, google-fu it.
    $BIN_NAME name \"WINDOW_NAME_HERE\" -- flatpak run FLATPAK_APP_HERE

    # WARNING: THIS COMMAND DOES NOT WORK IN GAMESCOPE.
    # Maximize the active window of an app opened with a command. This will maximize the first window that turns active (the first to appear).
    # You might need to change this value if there is, for example, a loading window in between the actual window.
    $BIN_NAME active 1 -- APP_COMMAND_HERE

    # WARNING: USE THIS COMMAND ONLY AS LAST RESORT.
    # Maximize ALL the viewable windows in relation to the root.
    $BIN_NAME viewable -- COMMAND_HERE

    # You can set the number of cycles and time per cycle as well.
    $BIN_NAME name \"WINDOW_NAME_HERE\" 10 0.50 --app_path=/path/to/binary_here.

Commands:
    active <num_active_window_changes>                              Maximize the active window of the initialized app.
                                                                    WARNING: THIS OPTION DOES NOT WORK IN GAMESCOPE. I was not able to find a method to get the current active window. ):

    help                                                            Help about any command.

    name <window_name> [<num_cycles>=100] [<time_per_cycle>=0.15]   Maximize the named window of the initialized app.
                                                                    To find the window name, type \`xwininfo\` on the terminal and click on the respective window.
                                                                    num_cycles and time_per_cycle are optional arguments. Default is 100 and 0.15s respectively.

    viewable [<num_cycles>=10] [<time_per_cycle>=0.15]              Maximize ALL the viewable windows in relation to the root window.
                                                                    # WARNING: USE THIS COMMAND ONLY AS LAST RESORT. It is recommend to try the \`name\` command first.
                                                                    num_cycles and time_per_cycle are optional arguments. Default is 20 and 0.15s respectively.

Command arguments:
    <num_active_window_changes>     The number of active window changes until you reach the window you want.
                                    For example, when opening an application it might display a loading window first, and then the main window.
                                    In this case the num_active_window_changes would be 2, and a value of 1 would result in $BIN_NAME maximizing the loading window instead.
                                    num_active_window_changes=0 is the current active window when executing the command.

    <num_cycles>                    The number of cycles. In each cycle the program will try to identify the window(s) and modify it(them).

    <time_per_cycle>                Duration of the \`sleep\` command that occurs every cycle, in seconds.

Options:
    -a, --app_path      Path to the application executable.

    -d, --display       Specify display device to get the max screen resolution from. If no display is specified use the primary display.
                        Since it has an optional parameter; either use the format \'-d=PARAM\' or \'-dPARAM\' (\'-d PARAM\' is not valid).

    -f, --force         Try to force maximize the window.

    -F, --fullscreen    Fullscreen the window instead (other window altering parameters are obsolete with this).

    -h, --help          Help about any command.

    -H, --height        The target height of the window in pixels.

    -v, --verbose       Print more information when executing.

    -W, --width         The target width of the window in pixels.

    -w, --wmctrl_path   Specify the path of the \`wmctrl\` binary; or else the program will look in \`\$PATH\`.
\n"
}

function f_unexpected_arguments() {
    if [ -n "${1-}" ]; then
        args="$@"
        printf "Error: unexpected arguments [$args].\nSee \`$BIN_NAME --help\` for help and examples.\n" >&2
        exit 1
    fi
}

# CMD ARGS =======================================================================================
! getopt --test 2> /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    printf "GNU's enhanced \`getopt\` is required to run this script.\nYou can usually find this in the util-linux package.\n" >&2
    exit 1
fi

###
# The first character '-' in SHORT_OPTS is required for positional and extra_args separation.
# An option followed by a single colon ':' means that it expects a parameter.
# An option followed by double colons '::' means that its parameter is optional.
# See `man getopt`.
SHORT_OPTS=-a:d::hfFH:vw:W:                                               # list all the short options
LONG_OPTS=app_path:,display::,force,fullscreen,help,height:,verbose,window_name:,width:  # list all the long options

# Temporarily store output to be able to check for errors.
# Activate advanced mode getopt quoting e.g. via "--options".
# Pass arguments only via   -- "$@"   to separate them correctly.
# getopt auto-adds "--" at the end of ${PARSED}, which is then later set to "$@" using the set command.
! PARSED=$(getopt --options ${SHORT_OPTS} \
                  --longoptions ${LONG_OPTS} \
                  --name "$0" \
                  -- "$@") # pass all the args to this script to getopt
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # E.g. if return value is 1 then getopt has complained about wrong arguments to stdout.
    exit 1
fi

# Use eval with "$PARSED" to properly handle the quoting.
# The set command sets the list of cmd arguments equal to ${PARSED}.
eval set -- "${PARSED}"

# Change key values where the format is key=value. After getopt parse, the equal sign glues to the value, thus `=value`. We remove this equal sign.
# Change parsing of args that have optional an optional parameter.
# Making the script, if called with, for example, '-o test' (instead of -o=test or -otest; that behaves as expected) parse it as ['-o','test'] instead of ['-o','','test'].
has_reached_doubledash=0
i=1
while [[ $i -lt $# ]]; do
    arg="${!i}"

    # Change the current argument by index if it has '=' as the first character.
    if [[ "${arg:0:1}" == "=" ]];
    then
        set -- "${@:1:i-1}" "${arg:1}" "${@:i+1}"
    fi

    if [[ "$arg" == "--" ]]; then break; fi

    ((i+=1))
done

# PARSE CMD ARGS =================================================================================

### Initialize basic variables.
is_help=0
IS_VERBOSE=0
declare -a arr_positional
declare -a arr_extra_args

### Initialize the parsed variables for the script.
declare user_command    # command to be executed
declare window_name     # name of the window that appears when the executable is ran
wmctrl_path=$(which wmctrl 2> /dev/null || echo "")      # path to the `wmctrl` binary2}')
screen_width_px=$(awk -Fx '{print $1}' <<< $(xdpyinfo | grep dimensions | awk '{print $2}')) # the screen (or if --display name specified, the monitor) width
screen_height_px=$(awk -Fx '{print $2}' <<< $(xdpyinfo | grep dimensions | awk '{print $2}'))
width_px=$screen_width_px # the width the window should aim for
height_px=$screen_height_px
is_force=0 # try to force maximize the window
is_fullscreen=0 # fullscreen the window instead

# Positional order for opt args.
is_width_or_height_opt_parsed=0

### Parse arguments.
is_dashes_parsed=0 # flag to track if we've parsed the doubledahs '--'.
while [[ $# -gt 0 ]]; do
    # Deal with the extra_args,
    if [[ $is_dashes_parsed -eq 1 ]]; then
        arr_extra_args+=("$1")

        # If the extra arg is NOT ignored as an opt arg of this script, then parse it normally below; else skip.
        if [[ ${ARE_EXTRA_ARGS_IGNORED} -eq 1 ]]; then
            shift
            continue
        fi
    fi

    case "$1" in
        -a|--app_path)
            user_command="$2"
            shift
            ;;
        -d|--display)
            if [[ $is_width_or_height_opt_parsed -eq 1 ]]; then
                printf "Error: the arg \`-d/--display\` must be before \`-W/--width\` and/or \`-H/--height\`.\n" >&2
                exit 1
            fi

            display=primary

            # Display device name exists.
            if [[ -n "$2" ]]; then
                display="$2"

                # Display device is invalid.
                if [[ -z $(xrandr --listactivemonitors | awk 'NR>1 {print $NF}' | grep $display) ]]; then
                    printf "Error: display \`$display\` specified with the arg \`-d/--display\` was not found.\nRun \`xrandr --listactivemonitors\` to get current displays.\n" >&2
                    exit 1
                fi

                echo "[$BIN_NAME] Specified display device is valid."

            else
                echo "[$BIN_NAME] Using primary display device."
            fi

            display_resolution=$(xrandr --current | grep $display | awk '{ if ($3 == "primary") {print $4} else {print $3} }' | awk -F+ '{print $1}' )
            echo "[$BIN_NAME] Display resolution is: $display_resolution"

            #Recalculate widths and heights.
            screen_width_px=$(awk -Fx '{print $1}' <<< $display_resolution)
            screen_height_px=$(awk -Fx '{print $2}' <<< $display_resolution)
            width_px=$screen_width_px
            height_px=$screen_height_px

            shift
            ;;
        -f|--force)
            is_force=1
            ;;
        -F|--fullscreen)
            is_fullscreen=1
            ;;
        -h|--help)
            is_help=1
            ;;
        -H|--height)
            is_width_or_height_opt_parsed=1
            height_px="$2"

            if [[ -z "${height_px##*[!0-9]*}" ]]; then
                printf $CMD_ERR_FORMAT "\`height\` must be a positive integer, in pixels." >&2
                exit 1
            fi

            shift
            ;;
        -v|--verbose)
            IS_VERBOSE=1
            ;;
        -W|--width)
            is_width_or_height_opt_parsed=1
            width_px="$2"

            if [[ -z "${width_px##*[!0-9]*}" ]]; then
                printf $CMD_ERR_FORMAT "\`width\` must be a positive integer, in pixels." >&2
                exit 1
            fi

            shift
            ;;
        -w|--wmctrl_path)
            wmctrl_path="$2"
            shift
            ;;
        --)
            is_dashes_parsed=1
            if [[ ${ARE_EXTRA_ARGS_DISCARDED_AFTER_DOUBLEDASH} -eq 1 ]]; then break; fi
            ;;
        *)  # Store positional arguments.
            arr_positional+=("$1");
            ;;
    esac
    shift  # expose the next argument
done

# Print help text. This command has priority.
if [[ $is_help -eq 1 ]] || ([[ -n "${arr_positional-}" ]] && [[ ${arr_positional[0],,} == "help" ]]); then f_print_help_text; exit 0; fi

# Parse the extra arguments here.
if [[ -n "${arr_extra_args-}" ]] && [[ "${#arr_extra_args[@]}" -gt 0 ]]; then

    if [[ -n "${user_command-}" ]]; then
        printf "Error: you cannot use the arg \`-a/--app_path\` with a command after the doubledash \`-- COMMAND\`.\nChoose only one.\n" >&2
        exit 1
    else
        user_command="${arr_extra_args[@]}"
    fi
fi

# FUNCTIONS ======================================================================================

# Changes the window dimensions and centers it.
#
# Parameters:
#   * [$1] wimctrl_path:        path to the wimctrl binary.
#   * [$2] window_id:           target window identifier.
#   * [$3] screen_width_px:     the width of the screen/display device in pixels.
#   * [$4] screen_height_px:    the height of the screen/display device in pixeels.
#   * [$5] width_px:            the target width of the target window.
#   * [$6] height_px:           the target height of the target window.
#
function f_change_window_dimensions_and_center() {
    wmctrl_path=$1
    window_id=$2
    screen_width_px=$3
    screen_height_px=$4
    width_px=$5
    height_px=$6

    if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] Setting window $window_id resolution and center."; fi
    "$wmctrl_path" -ir $window_id -e 0,$(($screen_width_px/2-$width_px/2)),$(($screen_height_px/2-height_px/2)),"$width_px","$height_px" &
}

# Tries to force maximize window (if the widht/height provided is the same as the screen/display device width/height).
#
# Parameters:
#   * [$1] wimctrl_path:        path to the wimctrl binary.
#   * [$2] window_id:           target window identifier.
#   * [$3] screen_width_px:     the width of the screen/display device in pixels.
#   * [$4] screen_height_px:    the height of the screen/display device in pixeels.
#   * [$5] width_px:            the target width of the target window.
#   * [$6] height_px:           the target height of the target window.
#
function f_force_maximize_window() {
    wmctrl_path=$1
    window_id=$2
    screen_width_px=$3
    screen_height_px=$4
    width_px=$5
    height_px=$6

    if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] Attempt to force maximize $window_id"; fi

    # Maximize width if parameter same as the screen.
    if [[ $width_px -eq $screen_width_px ]]; then
        if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] Width and screen width are the same, maximizing horizontally."; fi
        "$wmctrl_path" -ir $window_id -b add,maximized_horz &
    fi
    # Maximize height if parameter same as the screen.
    if [[ $height_px -eq $screen_height_px ]]; then
        if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] Height and screen height are the same, maximizing vertically."; fi
        "$wmctrl_path" -ir $window_id -b add,maximized_vert &
    fi
}

function f_maximize_window_by_active() {
    num_active_window_changed=0
    current_active_window_id=$(wmctrl -lp | grep $(xprop -root | grep _NET_ACTIVE_WINDOW | head -1 | awk '{print $5}' | sed 's/,//' | sed 's/^0x/0x0/') | awk '{print $1}')
    previous_active_window_id=$current_active_window_id

    while [[ $num_active_window_changed -lt $num_active_window_changes ]]
    do
            window_active=$(wmctrl -lp | grep $(xprop -root | grep _NET_ACTIVE_WINDOW | head -1 | awk '{print $5}' | sed 's/,//' | sed 's/^0x/0x0/'))
            if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] Current active window: $window_active"; fi

            current_active_window_id=$(awk '{print $1}' <<< $window_active)

            if [[ $current_active_window_id -ne $previous_active_window_id ]]; then
                if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] WINDOW HAS CHANGED TO: $current_active_window_id"; fi
                previous_active_window_id=$current_active_window_id
                num_active_window_changed+=1
            fi

            sleep 0.15
    done

    if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] FINAL WINDOW FOUND: $current_active_window_id"; fi

    if [[ $is_fullscreen -eq 1 ]]; then
        if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] Changing window $current_active_window_id to fullscreen."; fi
        "$wmctrl_path" -ir $current_active_window_id -b add,fullscreen &
        return 0
    fi

    f_change_window_dimensions_and_center "$wmctrl_path" "$current_active_window_id" "$screen_width_px" "$screen_height_px" "$width_px" "$height_px"

    if [[ $is_force -eq 1 ]]; then
        f_force_maximize_window "$wmctrl_path" "$current_active_window_id" "$screen_width_px" "$screen_height_px" "$width_px" "$height_px"
    fi
}

function f_maximize_window_by_viewable() {
    num_cycles_done=0
    arr_viewable_windows_maximized=()
    while :
    do
        if [[ $num_cycles_done -eq $num_cycles ]]; then break; fi

        if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] Cycle number: $num_cycles_done"; fi

        ! window_ids=$(xwininfo -root -tree 2>/dev/null | awk 'flag == 1 && $2 != "child:" {print $1}; $2 == "children:" {flag=1}' | head -n -1)

        for window_id in $window_ids; do
            # If array already contains window_id. Skip.
            if [[ "${arr_viewable_windows_maximized[@]}" =~ "$window_id" ]]; then continue; fi

            ! map_state=$(xwininfo -id $window_id 2>/dev/null | sed 's/ //g' | awk -F: '$1 == "MapState"{print $2}')

            if [[ "$map_state" == "IsViewable" ]]; then
                if [[ $IS_VERBOSE -eq 1 ]]; then
                    ! window_name=$(xwininfo -id $window_id 2>/dev/null | awk -F: '$1 == "xwininfo"{print $3}')
                    echo "[$BIN_NAME] Found new viewable window:$window_name"
                fi

                arr_viewable_windows_maximized+=("$window_id")

                if [[ $is_fullscreen -eq 1 ]]; then
                    if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] Changing window $window_name to fullscreen."; fi
                    "$wmctrl_path" -ir $window_id -b add,fullscreen &
                    continue
                fi

                f_change_window_dimensions_and_center "$wmctrl_path" "$window_id" "$screen_width_px" "$screen_height_px" "$width_px" "$height_px"

                if [[ $is_force -eq 1 ]]; then
                    f_force_maximize_window "$wmctrl_path" "$window_id" "$screen_width_px" "$screen_height_px" "$width_px" "$height_px"
                fi
            fi
        done

        sleep $time_per_cycle
        ((num_cycles_done+=1))
    done
}


function f_maximize_window_by_name() {
    num_cycles_done=0
    while :
    do
        if [[ $num_cycles_done -eq $num_cycles ]]; then break; fi

        if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] Cycle number: $num_cycles_done"; fi

        # Locate window.
        if ( xwininfo -name $window_name 2>/dev/null ); then
            ! window_id=$(xwininfo -name "$window_name" 2>/dev/null | awk '$1 == "xwininfo:" {printf $4}')

            if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] FOUND window with the name: $window_name. ID=$window_id ."; fi

            if [[ $is_fullscreen -eq 1 ]]; then
                if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] Changing window to fullscreen."; fi
                "$wmctrl_path" -ir $window_id -b add,fullscreen &
                return 0
            fi

            f_change_window_dimensions_and_center "$wmctrl_path" "$window_id" "$screen_width_px" "$screen_height_px" "$width_px" "$height_px"

            #The window is not maximized, attempt to maximize window here.
            if [[ $is_force -eq 1 ]]; then
                f_force_maximize_window "$wmctrl_path" "$window_id" "$screen_width_px" "$screen_height_px" "$width_px" "$height_px"
            fi

            break
        fi # continue loop until window can be found

        if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] Still not found window with the name: $window_name."; fi

        sleep $time_per_cycle
        ((num_cycles_done+=1))
    done
}

start_program() {
     eval $user_command
}

# EXECUTE SCRIPT =================================================================================

set -- "${arr_positional[@]}" # restore positional arguments as $1, $2, etc...

# Parse the positional arguments here.
if [[ $# -eq 0 ]]; then # a command must be provided
    f_print_help_text
    printf "\nError: missing command \`$BIN_NAME COMMAND\`\n" >&2
    exit 1
fi

# If user_command and arr_extra_args are not defined or empty, exit.
if [[ -z "${user_command-}" ]] && [[ -z "${arr_extra_args-}" ]]; then
    printf "Error: you must provide either an executable path with \`-a/--app_path\` or a command after the doubledashes \`-- COMMAND\`.\n" >&2
    exit 1
fi

# Check if wmctrl is file and executable.
if [[ -x "${wmctrl_path}" ]]; then
    if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] Binary \`wmctrl\` found in path $wmctrl_path"; fi
else
    printf "Error: wmctrl binary not found or not executable.\nPath specified: $wmctrl_path\n
Please use the optional arg \`-w/--wmctrl_path\` to set path or install in \$PATH directories.\n" >&2
    exit 1
fi

# COMMANDS EXECUTED HERE =========================================================================

num_cmd_params=0

case "$1" in
    "active")
        shift
        num_active_window_changes="${1-}"

        if [ -z "${num_active_window_changes##*[!0-9]*}" ]; then
            printf $CMD_ERR_FORMAT "\`active\` command requires a num_active_window_changes parameter that is an integer" >&2
            exit 1
        fi

        shift
        f_unexpected_arguments "$@"

        f_maximize_window_by_active &
        ;;
    "viewable")
        shift
        num_cycles="${1-}"

        if [[ -z "${num_cycles}" ]]; then
            num_cycles=10
            if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] num_cycles specified, defaulting to $num_cycles."; fi
        elif [[ -z "${num_cycles##*[!0-9]*}" ]]; then
            printf $CMD_ERR_FORMAT "\`viewable\` command requires a num_cycles parameter that is an integer" >&2
            exit 1
        else
            ((num_cmd_params+=1))
        fi

        time_per_cycle="${2-}"

        if [[ -z "${time_per_cycle}" ]]; then
            time_per_cycle=0.15
            if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] time_per_cycle not specified, defaulting to ${time_per_cycle}s."; fi
        elif [[ -z "${time_per_cycle##*[!0-9]*}" ]]; then
            printf $CMD_ERR_FORMAT "\`viewable\` command requires a TYME_PER_CYCLE parameter that is an integer" >&2
            exit 1
        else
            ((num_cmd_params+=1))
        fi

        shift $num_cmd_params
        f_unexpected_arguments "$@"

        f_maximize_window_by_viewable &
        ;;
    "name")
        shift
        window_name="${1-}"

        if [ -z "$window_name" ]; then
            printf $CMD_ERR_FORMAT "\`name\` command requires a window_name parameter" >&2
            exit 1
        fi
        ((num_cmd_params+=1))

        num_cycles="${2-}"

        if [[ -z "${num_cycles}" ]]; then
            num_cycles=100
            if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] num_cycles not specified, defaulting to $num_cycles"; fi
        elif [[ -z "${num_cycles##*[!0-9]*}" ]]; then
            printf $CMD_ERR_FORMAT "\`viewable\` command requires a num_cycles parameter that is an integer" >&2
            exit 1
        else
            ((num_cmd_params+=1))
        fi

        time_per_cycle="${3-}"

        if [[ -z "${time_per_cycle}" ]]; then
            time_per_cycle=0.15
            if [[ $IS_VERBOSE -eq 1 ]]; then echo "[$BIN_NAME] time_per_cycle not specified, defaulting to ${time_per_cycle}s."; fi
        elif [[ -z "${time_per_cycle##*[!0-9]*}" ]]; then
            printf $CMD_ERR_FORMAT "\`viewable\` command requires a TYME_PER_CYCLE parameter that is an integer" >&2
            exit 1
        else
            ((num_cmd_params+=1))
        fi

        shift $num_cmd_params
        f_unexpected_arguments "$@"

        f_maximize_window_by_name &
        ;;
    *)
        printf "Error: unrecognized command \`$1\`.\nSee \`$BIN_NAME --help\` for help and examples.\n" >&2
        exit 1
        ;;
esac

start_program "$user_command" && kill $!
